// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum DoctorBranch {
  ORTHOPEDICS // ออร์โธปิดิกส์
  PSYCHIATRIST // จิตเวช
  DENTIST // ทันตแพทย์
  NEUROLOGIST // ประสาทวิทยา
  INTERNAL_MEDICINE // อายุรกรรม
  PEDIATRICS // กุมารเวช
}

enum Status {
  WAITING
  CANCEL
  DONE
}

//user
model Staff {
  staffId  String @id @default(uuid())
  username String @unique
  password String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //staff
  MyEvent Event[]
}

model Doctor {
  id        String       @id @default(uuid())
  prefix    String
  firstName String
  lastName  String
  img       String?
  position  String
  branch    DoctorBranch

  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Appointment Appointment[]
}

model Event {
  id          Int      @id @default(autoincrement())
  title       String   @unique
  description String?
  date        DateTime
  img         String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  Creator   Staff? @relation(fields: [creatorId], references: [staffId])
  creatorId String
}

//user
model User {
  userId    String @id @default(uuid())
  citizenId String @unique
  password  String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  PatientRecord PatientRecord?
}

model PatientRecord {
  userId    String   @id
  prefix    String
  firstName String
  lastName  String
  birthDate DateTime
  address   String?
  hnNumber  String   @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  User User @relation(fields: [userId], references: [userId])

  Appointment Appointment[]
  Qeue        Queue[]
}

model Appointment {
  id          String   @id @default(cuid())
  date        DateTime
  title       String
  description String?

  status String @default("WAITING")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Record PatientRecord? @relation(fields: [userId], references: [userId])
  userId String

  Doctor   Doctor? @relation(fields: [doctorId], references: [id])
  doctorId String
}

model Queue {
  id     Int      @id @default(autoincrement())
  date   DateTime
  status String   @default("WAITING")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Record PatientRecord? @relation(fields: [userId], references: [userId])
  userId String
}

//for display only
model DrugDisplay {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  drugGroup   String
  dosage      String
  description String?
  img         String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model FormDisplay {
  id        Int      @id @default(autoincrement())
  name      String?
  url       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversations {
  id        String    @id @default(uuid())
  userId1   String
  userId2   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  messages  Message[]
}

model Message {
  id             String        @id @default(uuid())
  content        String
  receiverId     String
  senderId       String
  conversations  Conversations @relation(fields: [conversationId], references: [id])
  conversationId String
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
}
